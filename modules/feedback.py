# modules/feedback.py

import os
import json
import logging
from typing import List, Dict, Optional
import streamlit as st
from datetime import datetime

from .utils import load_config, ensure_directory, save_feedback, normalize_text
from dotenv import load_dotenv

# Load environment variables from .env file, if it exists
load_dotenv()

# Load configurations from config.yaml
config = load_config('config/config.yaml')

def collect_feedback(
    input_text: str,
    response_text: str,
    feedback: str,
    timestamp: Optional[str] = None
) -> Dict:
    """
    Collects feedback provided by the user.
    
    Args:
        input_text (str): User-provided input text.
        response_text (str): Response generated by the model.
        feedback (str): Feedback provided by the user (e.g., "useful", "not useful", "suggestion").
        timestamp (Optional[str], optional): Timestamp of the interaction. Defaults to None.
    
    Returns:
        Dict: Dictionary containing feedback data.
    """
    if not timestamp:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    feedback_entry = {
        "timestamp": timestamp,
        "input": normalize_text(input_text),
        "response": normalize_text(response_text),
        "feedback": feedback.lower().strip()
    }
    
    logging.debug(f"Collected feedback: {feedback_entry}")
    return feedback_entry

def save_user_feedback(feedback_entry: Dict, feedback_file: str = "feedback_data.jsonl") -> bool:
    """
    Saves user feedback to a JSON Lines file.
    
    Args:
        feedback_entry (Dict): Dictionary containing feedback data.
        feedback_file (str, optional): Path to the feedback file. Defaults to "feedback_data.jsonl".
    
    Returns:
        bool: True if the save is successful, False otherwise.
    """
    try:
        with open(feedback_file, 'a', encoding='utf-8') as f:
            json.dump(feedback_entry, f, ensure_ascii=False)
            f.write('\n')
        logging.info(f"Feedback saved to '{feedback_file}'.")
        return True
    except Exception as e:
        st.error(f"Error saving feedback: {e}")
        logging.error(f"Error saving feedback: {e}")
        return False

def load_feedback(feedback_file: str = "feedback_data.jsonl") -> List[Dict]:
    """
    Loads all stored feedback.
    
    Args:
        feedback_file (str, optional): Path to the feedback file. Defaults to "feedback_data.jsonl".
    
    Returns:
        List[Dict]: List of dictionaries containing feedback data.
    """
    feedback_list = []
    if not os.path.exists(feedback_file):
        logging.warning(f"Feedback file '{feedback_file}' not found.")
        return feedback_list
    try:
        with open(feedback_file, 'r', encoding='utf-8') as f:
            for line in f:
                feedback_list.append(json.loads(line))
        logging.info(f"Loaded {len(feedback_list)} feedback records from '{feedback_file}'.")
    except Exception as e:
        st.error(f"Error loading feedback: {e}")
        logging.error(f"Error loading feedback: {e}")
    return feedback_list

def process_feedback():
    """
    Interface to collect and process user feedback.
    """
    st.header("ðŸ’¬ User Feedback")
    
    # User input for providing feedback
    with st.form("feedback_form"):
        st.write("Please provide your feedback on the model's response.")
        feedback_options = ["Useful", "Not Useful", "Suggestion"]
        selected_feedback = st.selectbox("Select the type of feedback:", feedback_options)
        suggestion = st.text_area("If you have a suggestion, please describe it here:")
        submit_button = st.form_submit_button("Submit Feedback")
    
    if submit_button:
        # Get information from chat history
        if 'chat_history' not in st.session_state or not st.session_state['chat_history']:
            st.warning("No interaction available to provide feedback.")
            return
        
        last_interaction = st.session_state['chat_history'][-1]
        if last_interaction['role'] != 'bot':
            st.warning("Please provide feedback only for bot responses.")
            return
        
        input_text = st.session_state['chat_history'][-2]['content'] if len(st.session_state['chat_history']) >= 2 else ""
        response_text = last_interaction['content']
        
        # Incorporate the suggestion into the feedback, if provided
        final_feedback = selected_feedback
        if suggestion.strip():
            final_feedback += f" - Suggestion: {normalize_text(suggestion)}"
        
        # Collect feedback
        feedback_entry = collect_feedback(
            input_text=input_text,
            response_text=response_text,
            feedback=final_feedback
        )
        
        # Ensure the directory for feedback exists
        feedback_dir = os.path.dirname(config['feedback']['feedback_file'])
        if not ensure_directory(feedback_dir):
            st.error("Could not ensure the directory for saving feedback.")
            return
        
        # Save feedback
        if save_user_feedback(feedback_entry, feedback_file=config['feedback']['feedback_file']):
            st.success("Thank you for your feedback!")
            # Clear the suggestion field after submission
            if suggestion.strip():
                st.session_state['feedback_suggestion'] = ""
        else:
            st.error("Failed to save feedback. Please try again later.")

def analyze_feedback_statistics():
    """
    Analyzes and displays basic statistics of collected feedback.
    """
    st.header("ðŸ“Š Feedback Statistics")
    
    feedback_list = load_feedback(feedback_file=config['feedback']['feedback_file'])
    if not feedback_list:
        st.info("No feedback collected yet.")
        return
    
    # Count feedback types
    feedback_counts = {}
    for entry in feedback_list:
        label = entry['feedback'].split(" - ")[0].capitalize()
        feedback_counts[label] = feedback_counts.get(label, 0) + 1
    
    st.subheader("Feedback Distribution")
    st.bar_chart(feedback_counts)
    
    # Display suggestions
    suggestions = [entry['feedback'].split(" - ")[1] for entry in feedback_list if " - Suggestion:" in entry['feedback']]
    if suggestions:
        st.subheader("User Suggestions")
        for idx, suggestion in enumerate(suggestions, 1):
            st.write(f"{idx}. {suggestion}")
    else:
        st.info("No suggestions provided yet.")

def run_feedback_interface():
    """
    Runs the feedback interface using Streamlit.
    """
    tab1, tab2 = st.tabs(["ðŸ’¬ Provide Feedback", "ðŸ“Š View Statistics"])
    
    with tab1:
        process_feedback()
    
    with tab2:
        analyze_feedback_statistics()

def run_feedback_module():
    """
    Runs the feedback module.
    """
    run_feedback_interface()

if __name__ == "__main__":
    st.warning("This module should not be run directly.")
